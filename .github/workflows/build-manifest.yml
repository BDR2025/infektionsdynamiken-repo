name: Build manifest

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'api/manifest.json'
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: manifest-update-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo (repository site)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # ⬇️ Statt actions/checkout auf Fremd-Repo: simples git clone (public, kein Token nötig)
      - name: Fetch engine repo (public clone)
        run: |
          rm -rf sd_engine
          git clone --depth 1 https://github.com/BDR2025/infektionsdynamiken-engine.git sd_engine
          ls -la sd_engine | head -n 20

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Generate manifest (overlay engine → 1-2 UID-E)
        env:
          INCLUDED_ROOTS: ""
        run: |
          python3 scripts/gen_manifest.py
          test -f api/manifest.json && jq '.generated' api/manifest.json || true

      - name: Commit & Push manifest (race-safe)
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add api/manifest.json
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "chore: update manifest [skip ci]"

          for attempt in 1 2 3; do
            echo "Push attempt #$attempt"
            git fetch origin "$BRANCH_NAME" --depth=1
            if git rebase "origin/$BRANCH_NAME"; then
              echo "Rebase ok"
            else
              echo "Rebase failed, fallback merge"
              git rebase --abort || true
              git pull --no-rebase --no-edit origin "$BRANCH_NAME"
            fi
            if git push origin "HEAD:$BRANCH_NAME"; then
              echo "Push succeeded."
              break
            fi
            if [ "$attempt" = "3" ]; then
              echo "Push failed after 3 attempts." >&2
              exit 1
            fi
            sleep 2
          done





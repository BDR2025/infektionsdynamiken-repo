name: Build manifest

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'api/manifest.json'   # verhindert CI-Schleife bei Bot-Commits
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: manifest-update-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sd_repo (dieses Repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          path: .

      - name: Checkout sd_engine (zweites Repo)
        uses: actions/checkout@v4
        with:
          # ðŸ‘‰ Falls euer Org/Repo abweicht, Repo-Variable ENGINE_REPO_FULL setzen (z.B. "ORG/REPO").
          repository: ${{ vars.ENGINE_REPO_FULL || 'infektionsdynamiken/infektionsdynamiken-engine' }}
          fetch-depth: 0
          path: sd_engine

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Debug workspace (kurz)
        run: |
          echo "Branch=${{ github.ref_name }}"
          echo "PWD=$(pwd)"
          find . -maxdepth 2 -type d | sort || true

      - name: Generate manifest (Overlay: sd_repo + sd_engineâ†’1-2 UID-E)
        env:
          # leer lassen => Top-Level-Verzeichnisse werden automatisch erkannt
          INCLUDED_ROOTS: ""
        run: |
          python3 scripts/gen_manifest.py
          test -f api/manifest.json && jq '.generated' api/manifest.json || true

      - name: Commit & Push manifest (race-safe)
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add api/manifest.json
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "chore: update manifest [skip ci]"

          for attempt in 1 2 3; do
            echo "Push attempt #$attempt"
            git fetch origin "$BRANCH_NAME" --depth=1
            if git rebase "origin/$BRANCH_NAME"; then
              echo "Rebase ok"
            else
              echo "Rebase failed, fallback merge"
              git rebase --abort || true
              git pull --no-rebase --no-edit origin "$BRANCH_NAME"
            fi
            if git push origin "HEAD:$BRANCH_NAME"; then
              echo "Push succeeded."
              break
            fi
            if [ "$attempt" = "3" ]; then
              echo "Push failed after 3 attempts." >&2
              exit 1
            fi
            sleep 2
          done



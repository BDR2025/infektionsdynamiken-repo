UID-Intro · SIRD Runner · tech.txt

Zweck
Der SIRD Runner führt die Intro-Simulation für SIRD aus. Er rechnet deterministisch mit festem Integrator (Euler), zeichnet die Kurven ins Canvas und liefert pro Tick KPI-Werte. Sprache, Modus und Coach steuern die Etappen-Sequenz. Gegenüber SIR kommt das Fach D (Verstorbene) hinzu.

Voraussetzungen im DOM

<canvas id="intro-canvas"></canvas>
<!-- Optional bei Betrieb ohne Boot -->
<div id="kpis-comp"></div>
<div id="kpis-context"></div>


<html> enthält Kontextattribute: lang, data-mode, data-coach.

Einbindung

Mit Boot

<script type="module">
  import * as Run from "/js/minilabs/intro/intro-sird.js";
  window.mountIntroSIRD = Run.mountIntroSIRD || Run.default || Run;
</script>
<script src="/js/minilabs/intro/intro-boot.js"></script>


Ohne Boot

<script type="module">
  import { mountIntroSIRD } from "/js/minilabs/intro/intro-sird.js";

  const controller = mountIntroSIRD({
    canvas: document.getElementById("intro-canvas"),
    onUpdate: p => {
      // KPI-Update ins UI schreiben (z.B. p.t, p.sRel, p.iRel, p.rRel, p.dRel)
    }
  });

  controller.play();
  // controller.stop();
</script>


API

mountIntroSIRD(opts) -> Controller

opts.canvas HTMLCanvasElement oder CSS-Selector

opts.onUpdate Funktion: erhält pro Tick die KPI-Payload

opts.onEnd optional (Callback nach letzter Etappe)

opts.locale / opts.mode / opts.coach optional, überschreiben <html>-Attribute

Controller = { play(): void, stop(): void, isRunning(): boolean }

Modell, Numerik und Ablauf

SIRD auf Fraktionsskala (N = 1)

Parameter im Runner (Intro-Standard): R0, D (infektiöse Dauer), I0, T (Laufzeit), dt

Euler-Integration; Zeitreihen für S, I, R, D werden berechnet und gezeichnet

Sequenzen je Coach definieren: sichtbare Kurven, Etappen-Dauer, Wipes/Carry-Over

KPI-Payload (Beispiel)

{
  "t": 120,
  "r0": 2.0,
  "reff": 1.3,
  "sRel": 88.4,
  "iRel": 7.2,
  "rRel": 3.8,
  "dRel": 0.6
}


Zusätzlich wird pro Tick ein CustomEvent am window ausgelöst:

window.addEventListener("idv:intro:kpi", e => {
  const p = e.detail;
});


Rendering

Canvas-Rendering ohne externe Chart-Bibliothek

Farben aus CSS-Tokens (typisch --c-s, --c-i, --c-r, --c-d)

Prozent-Gitter, DPI-aware Canvas-Sizing

Timing

Animation via requestAnimationFrame

FPS-robuste Zeitsteuerung/Index-Fortschritt je Etappe

Coach-Varianten in einem Runner

lang, data-mode, data-coach steuern die Auswahl der Sequenz (Etappen, Dauer, Sichtbarkeiten, Wipes). Keine separaten Dateien notwendig.

Häufige Fehlerquellen

Falscher Modulpfad beim Import

Canvas ohne CSS-Größe → 0×0 Darstellung

onUpdate vergessen (bei Betrieb ohne Boot) → keine KPIs im UI

Mehrfaches Mounten ohne Cleanup → doppelte Window-Listener

Minimaldiagnose

Nach controller.play() → controller.isRunning() prüfen

Auf idv:intro:kpi lauschen und Payload loggen

canvas.width/height vs. CSS-Größe in DevTools checken

Boot-Abgleich für SIRD

Für die Intro-Demo genügt:

KPI oben: S, I, R, D · unten: t

IDs konsistent benennen: #kpi-s-rel, #kpi-i-rel, #kpi-r-rel, #kpi-d-rel, #kpi-t
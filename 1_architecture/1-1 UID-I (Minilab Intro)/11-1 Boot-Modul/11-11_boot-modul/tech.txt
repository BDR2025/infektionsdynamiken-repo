UID-Intro · Runner · tech.txt
Zweck

Der Runner führt die Intro-Simulation aus. Er rechnet deterministisch mit festem Integrator, zeichnet die Kurven ins Canvas und liefert pro Tick KPI-Werte an das UI. Er wählt anhand von Sprache, Modus und Coach die passende Etappen-Sequenz.

Voraussetzungen im DOM
<canvas id="intro-canvas"></canvas>
<!-- Optional, wenn ohne Boot gearbeitet wird -->
<div id="kpis-comp"></div>
<div id="kpis-context"></div>


<html> trägt den Kontext über Attribute lang, data-mode, data-coach. Fehlt data-coach, wählt der Runner automatisch einen passenden Coach.

Einbindung
Variante A mit Boot

Boot importiert den Runner und startet ihn.

<script type="module">
  import * as Run from "/js/minilabs/intro/intro-sir.js";
  window.mountIntroSIR = Run.mountIntroSIR || Run.default || Run;
</script>
<script src="/js/minilabs/intro/intro-boot.js"></script>

Variante B ohne Boot

Direktes Mounting für Demos oder Tests.

<script type="module">
  import { mountIntroSIR } from "/js/minilabs/intro/intro-sir.js";

  const controller = mountIntroSIR({
    canvas: document.getElementById("intro-canvas"),
    onUpdate: payload => {
      // KPI ins UI schreiben
      // z. B. payload.t, payload.r0, payload.reff, payload.sRel, payload.iRel, payload.rRel
    },
    onEnd: () => {
      // optional
    }
  });

  controller.play();
  // controller.stop();
</script>

API
mountIntroSIR(opts) -> Controller

opts.canvas   // HTMLCanvasElement oder CSS-Selector
opts.onUpdate // Funktion: erhält pro Tick KPI-Payload
opts.onEnd    // Funktion: wird nach der letzten Etappe aufgerufen
opts.locale   // optional: überschreibt <html lang>
opts.mode     // optional: überschreibt data-mode
opts.coach    // optional: überschreibt data-coach

Controller = { play(): void, stop(): void, isRunning(): boolean }

KPI-Payload (Beispiel SIR)
{
  "t": 12,
  "r0": 2.2,
  "reff": 1.6,
  "sRel": 92.1,
  "iRel": 5.4,
  "rRel": 2.5
}


Nicht sichtbare Kurven senden keinen Prozentwert. Modell-spezifische Runner liefern zusätzliche Felder wie Peaks, Gleichgewicht oder Impfquoten. Zusätzlich feuert der Runner ein CustomEvent am window:

window.addEventListener("idv:intro:kpi", e => {
  const payload = e.detail;
});

Coach-Varianten aus einem Runner

Der Runner liest lang, data-mode, data-coach und wählt daraus die Sequenz. Die Sequenz definiert Etappen, Dauer, sichtbare Kurven, Wipes und Carry-Over. Separate Dateien sind nicht nötig.

Timing und Rendering

Numerik mit festem Integrator Euler

Zeitsteuerung über requestAnimationFrame

SIR bereits fps-unabhängig mit rAF-Delta

Canvas-Rendering ohne Chart-Bibliothek

Häufige Fehlerquellen

Canvas fehlt oder ist 0×0 Pixel. In dem Fall liefert mountIntroSIR einen no-op Controller.

Runner als Modul geladen, aber Boot erwartet window.mountIntroSIR. Bei Betrieb mit Boot sicherstellen, dass der Name gesetzt wird.

onUpdate vergessen. Events treffen am window ein, aber ohne eigenes Rendering gibt es keine KPI-Ausgabe.

DPI-Unschärfe. Canvas braucht CSS-Größe, Runner setzt Device-Pixel-Ratio.

Minimaldiagnose

controller.isRunning() nach play() prüfen

Auf idv:intro:kpi lauschen, um Ticks zu verifizieren

In DevTools canvas.width/height vs. CSS-Größe prüfen